-----------------------------------------------------------------------------
--                                                                          -
--  Copyright 1994, University of Cambridge Computer Laboratory             -
--                                                                          -
--  All Rights Reserved.                                                    -
--                                                                          -
-----------------------------------------------------------------------------
--
-- INTERFACE:
--
--      Allocator for physical page frames.
-- 
-- DESCRIPTION:
--
--      Provides basic physical memory allocation and management.
-- 
-- ID : $Id: Frames.if 1.1 Thu, 18 Feb 1999 14:16:19 +0000 dr10009 $
-- 
-- \chapter{Memory}
-- \section{Physical Memory Allocation}
-- 

-- The bottom level of the memory system is a physical page frame
-- allocator which implements the "Frames" interface.  The interface
-- deals in byte addresses and sizes, but the amount of memory allocated
-- will always be frame-aligned and rounded up to a whole number of frame.
-- 
-- Note that there is no rigorous notion of a ``set'' of frames.  
-- Unlike "Heap.Malloc", you can "Alloc" a number of frames in one go 
-- and "Free" them piecemeal, or vice versa. However we do have the 
-- notion of two different sorts of frames.
--
--    - physical frames
--    - logical frames
-- 
-- A \emph{physical} frame is a piece of physical memory of size 
-- FRAME\_SIZE [which is more or less guaranteed to be the same 
-- as PAGE\_SIZE]. Equivalently one may consider the size of a physical
-- frame to be $2^{FRAME\_WIDTH}$.
-- In summary: a physical frame is the analog of a normal ``page'' in 
-- the virtual address space. 
-- 
-- A \emph{logical} frame, on the other hand, is a naturally aligned 
-- piece of physical memory of size $2^{FRAME\_WIDTH + k}$, where 
-- $k \geq 0$. Different regions of the physical address space may 
-- have different logical frame sizes. Additionally, a client may 
-- request (via "Alloc" or "AllocRange") a number of bytes with a 
-- given "frame width" --- this is used to constrain alignment and 
-- rounding (`bytes' will be rounded up). It also means that the 
-- allocated memory will be accounted [internally] as a logical frame 
-- of the appropriate width. When freeing at a particular start
-- address, the 'bytes' will be rounded up to the logical frame width 
-- with which they were allocated.
-- In summary: a logical frame is (roughly) the analog of a 
-- ``superpage'' in the virtual address space. 
-- 
Frames : LOCAL INTERFACE =
  NEEDS Mem;
  NEEDS Heap;
BEGIN

  -- A Frame is the physical equivalent of a Page.
  -- A Frame is either allocated or free.
  
  Alloc : PROC    [ bytes  : CARDINAL,
		    fwidth : CARDINAL ]
	  RETURNS [ a      : ADDRESS  ];
    -- If there are "k" contiguous free frames of physical memory
    -- of width "fwidth" (which is $\geq$ FRAME\_WIDTH) which together 
    -- contain at least "bytes" bytes, then mark them allocated and 
    -- return the address of the first.  

  AllocRange: PROC  [ bytes : CARDINAL, 
		     fwidth : CARDINAL,
		      start : ADDRESS, 
		      attr  : Mem.Attrs  ]
	    RETURNS [  a    : ADDRESS    ];
    -- "AllocRange" is similar to "Alloc", but allows the
    -- specification of an (optional) starting address and requested 
    -- attributes.
    --
    -- The "start" parameter, if valid (i.e. aligned), specifies the
    -- requested first address of the memory to be allocated. If there
    -- are not "k" contiguous free frames of width "fwidth" available 
    -- starting at this address, or if the address is not naturally 
    -- aligned to "fwidth", then "NO_ADDRESS" is returned, which is  
    -- guataranteed to be \emph{not} NULL (since NULL is often zero 
    --  which {\em may} be a valid return address in some cases).
    --
    -- The parameter "attr" can optionally specify a number of requested
    -- attributes. 


  Query : PROC    [ addr   : ADDRESS;  ] 
	  RETURNS [ fwidth : CARDINAL, 
                    attr   : Mem.Attrs ];
    -- The "Query" method is provided to allow clients to discover
    -- something about the state of a particular frames. The result 
    -- "fwidth" gives the logical frame width of the region within 
    -- which "addr" falls (or, if the frame is allocated, the frame 
    -- width with which is was effectively allocated), while the
    -- result "attr" is a set of properties of the memory at that address.

  Free  : PROC [ a: ADDRESS; bytes: CARDINAL ] RETURNS [];
    -- Mark all frames containing addresses in the range "[a, a + bytes)"
    -- as free. This will actually free an exact number of logical
    -- frames starting at address "a"; i.e. may free more than "bytes"
    -- bytes in practice. 
							  
  Destroy : PROC [] RETURNS []; 
    -- Destory this "Frames" interface. This includes freeing all
    -- frames which have been allocated via the interface. 
							
END.

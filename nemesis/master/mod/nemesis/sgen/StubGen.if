-----------------------------------------------------------------------------
--                                                                          -
--  Copyright 1997, University of Cambridge Computer Laboratory             -
--                                                                          -
--  All Rights Reserved.                                                    -
--                                                                          -
-----------------------------------------------------------------------------
--
-- INTERFACE:
--
--      StubGen.if
-- 
-- DESCRIPTION:
--
--      Interface to dynamic stub generator
-- 
-- ID : $Id: StubGen.if 1.1 Thu, 18 Feb 1999 14:16:19 +0000 dr10009 $
-- 
-- \chapter{Inter-Domain Communication}
--

-- 

StubGen : LOCAL INTERFACE = 
NEEDS Type;
NEEDS TypeSystem;
NEEDS Heap;
NEEDS IDCStubs;
NEEDS IDCMarshalCtl;
NEEDS IDC;
BEGIN

   -- An "Instruction" is a single element in a byte code program. A
   -- "Code" is a program describing how to marshal/unmarshal a type

   Instruction : TYPE = CARDINAL;
   Code : TYPE = SEQUENCE OF Instruction;

   Failure : EXCEPTION [];

   -- "GenIntf" generates dynamic stubs (or returns a cached copy) for
   -- a given typecode and marshal control interface

   GenIntf : PROC [ tc  : Type.Code,
                    ctl : IREF IDCMarshalCtl,
                    h   : IREF Heap ]
             RETURNS [ stubs : IDCStubs.Info ]
             RAISES Failure, TypeSystem.BadCode;

   -- "GenType" generates a byte code program for marshalling or
   -- unmarshalling a particular concrete type

   GenType : PROC [ tc  : Type.Code,
                    ctl : IREF IDCMarshalCtl,
                    h   : IREF Heap ]
             RETURNS [ code : REF Code ]
             RAISES Failure, TypeSystem.BadCode;

   -- "Marshal" takes a byte code program generated by "GenType" and
   -- interprets it to marshal the object located by "element". It
   -- returns "True" if the marshalling was successful, or "False"
   -- otherwise. If "doFree" is true, any dynamically allocated
   -- memory within the object will be freed as it is traversed
   -- (whether or not the marshalling was successful).

   Marshal : PROC [ code    : REF Code,
                    idc     : IREF IDC,
                    bd      : IDC.BufferDesc,
                    element : ADDRESS,
                    doFree  : BOOLEAN ]
             RETURNS [ ok   : BOOLEAN ];

   -- "Unmarshal" takes a byte code program generated by "GenType" and
   -- interprets it to unmarshal from "bd" into the object located by
   -- "element". Any memory allocated during the unmarshalling is
   -- recorded in the "mallocs" sequence.

   Unmarshal : PROC [ code    : REF Code,
                      idc     : IREF IDC,
                      bd      : IDC.BufferDesc,
                      element : ADDRESS,
                      mallocs : REF IDC.AddrSeq ]
               RETURNS [ ok   : BOOLEAN ];

END.
      
  
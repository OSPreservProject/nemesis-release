-----------------------------------------------------------------------------
--                                                                          -
--  Copyright 1997, University of Cambridge Computer Laboratory             -
--                                                                          -
--  All Rights Reserved.                                                    -
--                                                                          -
-----------------------------------------------------------------------------
--
-- INTERFACE:
--
--      ActivationF.if
-- 
-- DESCRIPTION:
--
--      Hooks for registering activation handling code.
-- 
-- ID : $Id: ActivationF.if 1.1 Thu, 18 Feb 1999 14:16:19 +0000 dr10009 $
-- 
-- \chapter{Domains, Events and Activation}
-- 

--
-- "ActivationF" (need new name) deals with demuxing events to
-- "ChannelNotify" handlers and invoking "TimeNotify" handlers
-- whenever timeouts are observed to be reached.
-- It generally sits directly on top of the VP (i.e. as an activation
-- handler), and after performing its actions upcalls the next
-- activation handler.
--

ActivationF : LOCAL INTERFACE = 
  NEEDS Activation;
  NEEDS Channel;
  NEEDS ChannelNotify;
  NEEDS Time;
  NEEDS TimeNotify;
BEGIN


  --
  -- Notifications on Channels.
  --
 
  -- "Attach" associates an "ChannelNotify" with a given channel
  -- end-point, which should be of type "RX". Thereafter, event
  -- notifications coming in on that channel are simply
  -- dispatched to the Notify routine.

  -- Note that these operations are typically called by various 
  -- "Entry"s (such as those used for IDC, memory management, 
  -- or to implement event counts). Most 'application' level code
  -- should not need to call these directly.

  Attach : PROC    [ cn : IREF ChannelNotify, rx : Channel.RX ]
           RETURNS [ on : IREF ChannelNotify                  ] 
           RAISES  Channel.Invalid, Channel.BadState;
    -- Ensure that in future event notifications on the channel "rx"
    -- are dispatched via "cn".  Raises exceptions if the channel
    -- end-point is invalid, or not of type "RX".  Return the old
    -- "ChannelNotify" "on" previously attached to "rx", or "NULL" if
    -- there was none. If "cn" is "NULL", no more activations are sent
    -- for this channel.

  -- Clients dealing with event notification may sometimes wish to 
  -- perform some operations which are atomic with respect to the
  -- calling of the notification handler. Rather than turn off
  -- activations, it is possible (and preferable) to mask the 
  -- notification of a particular event (or of all events).

  MaskEvent : PROC    [ rx : Channel.RX ] 
              RETURNS [ ok : BOOLEAN    ]
              RAISES  Channel.Invalid, Channel.BadState;
    -- Temorarily cause events arriving on the channel "rx" to
    -- be ignored: the events will not be \emph{lost}, simply 
    -- deferred to such a time as "UnmaskEvent" is called. 
    -- Returns "False" if the event was already masked, or 
    -- "True" otherwise. 
    -- Raises exceptions if the channel end-point is invalid, or not 
    -- of type "RX".

  UnmaskEvent : PROC    [ rx : Channel.RX ] 
                RETURNS [ ok : BOOLEAN    ]
                RAISES  Channel.Invalid, Channel.BadState;
    -- Reenable the processing of events arriving on the channel "rx".
    -- Returns "False" if the event was not already masked, or 
    -- "True" otherwise. 
    -- Raises exceptions if the channel end-point is invalid, or not 
    -- of type "RX".

  MaskEvents : PROC [] RETURNS [];
    -- Masks all events, regardless of whether they were already 
    -- masked or not. After a subsequent "UnmaskEvents", however,
    -- any events which were individually masked at the time of 
    -- this call will still be so.

  UnmaskEvents : PROC [] RETURNS [];
    -- Unmasks all events.


  TooManyTimeouts : EXCEPTION [];
    -- Raised if the ActivationF cannot deal with anymore timeouts.


  AddTimeout : PROC    [ tn       : IREF TimeNotify,
                         deadline : Time.T,
                         handle   : WORD             ]
               RETURNS [ ok       : BOOLEAN          ]
               RAISES  TooManyTimeouts;

     -- Arrange that the "Notify" procedure of "tn" is called once it
     -- is noticed that the current time is >= "deadline". The
     -- "handle" parameter is provided as an opaque value which will
     -- be present when the upcall occurs.
     -- Returns "True" if everything went ok, "False" otherwise
     -- (e.g. if the current time is already later than "deadline").
     -- Raises "TooManyTimeouts" if it cannot add another timeout.

  DelTimeout : PROC    [ deadline : Time.T,
                         handle   : WORD    ]
               RETURNS [ ok       : BOOLEAN ];

     -- Remove a timeout previously registered by "AddTimeout". 
     -- Returns "True" if there was a timeout for time "deadline" with
     -- handle "handle" to be removed, "False" otherwise.

  -- Clients dealing with time notifications may sometimes wish to 
  -- perform some operations which are atomic with respect to the
  -- calling of the notification handler. Rather than turn off
  -- activations, it is possible (and preferable) to mask the 
  -- notification of all timeouts.

  MaskTimeouts : PROC [] RETURNS [];
    -- Masks all timeouts. No time notifications will be \emph{lost}, 
    -- but they will be deferred until some time after the calling of
    -- "UnmaskTimeouts" below. 

  UnmaskTimeouts : PROC [] RETURNS [];
    -- Unmasks all timeouts.


  -- 
  -- Chained activation handlers
  -- 
  
  -- A (for example) ULS may register \emph{its} "Activation" closure with
  -- the "SetHandler" call. This will cause it to be 'activated'
  -- after the channel notification process has occurred.

  SetHandler : PROC    [ ah : IREF Activation ]
               RETURNS [ oh : IREF Activation ];

     -- Register "ah" as the activation handler to be invoked after
     -- channel demultiplexing. Returns the old handler "oh", or
     -- "NULL" is there was none. This allows chaining of activation
     -- handler-style code.
     -- {\bf XXX} At present it is the responsibility of the caller to
     -- call "oh" if it is necessary. Aha.



  -- 
  -- Exit hooks
  -- 

  Reactivate : PROC [] RETURNS [];
     -- When a ULS (or whoever) believes that it has nothing more to
     -- do, it may call "Reactivate". This essentially checks for 
     -- events and timeouts once more and, if nothing of interest has
     -- occurred, RFABlock's the domain until the closest timeout (if
     -- any).
END.

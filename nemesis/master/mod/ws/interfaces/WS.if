-----------------------------------------------------------------------------
--                                                                          -
--  Copyright 1994, University of Cambridge Computer Laboratory             -
--                                                                          -
--  All Rights Reserved.                                                    -
--                                                                          -
-----------------------------------------------------------------------------
--
-- INTERFACE:
--
--      WS
-- 
-- DESCRIPTION:
--
--      Interface provided by the Nemesis Client Rendering Window 
--      System.
-- 
-- ID : $Id: WS.if 1.2 Wed, 28 Apr 1999 11:42:49 +0100 dr10009 $
-- 
-- \chapter{Window System}
-- 

-- A "WS" closure forms the IDC interface for clients of the Window
-- System. It allows clients to request changes to the position and
-- shape of their windows, and to raise and lower them on the display.
-- These requests may be carried out or ignored, depending on the
-- policy implemented by the Window System.
--
-- "WS" also allows clients to obtain:
--
-- \begin{itemize} 
--
-- \item Frame Buffer update streams for their windows. (See
-- "FBBlit.if")
--
-- \item An event stream. This is an IO channel used by the Window
-- System to pass events back to the client. 
--
-- \end{itemize}

WS : LOCAL INTERFACE = 
  NEEDS IOOffer;
  NEEDS Time;
  NEEDS FB;
  NEEDS FBBlit;
  NEEDS Region;
BEGIN

  Failure : EXCEPTION [];

  -- The requested operation could not be performed.

  BadWindow : EXCEPTION [];  

  -- An invalid window ID was passed to a method.
  
  WindowID  : TYPE = LONG CARDINAL;

  -- A window is an opaque identifier

  Button  : TYPE = { Left, Middle, Right };
  Buttons : TYPE = SET OF Button;
  MouseData : TYPE =  RECORD [ buttons : Buttons,
                                  x, y : INTEGER,
                            absx, absy : INTEGER ];  

  -- The "Buttons" field of a "MouseData" record contains the current
  -- state of the system mouse buttons. The "x" and "y" fields contain
  -- the current window-relative mouse coordinates. The "absx" and
  -- "absy" fields contain the absolute mouse coordinates.

  KeySym : TYPE = CARDINAL;
  NoData : TYPE = CARDINAL;
  Rectangle : TYPE = RECORD [ x1 : CARDINAL,
                              y1 : CARDINAL,
                              x2 : CARDINAL,
                              y2 : CARDINAL ];

  ExposeData : TYPE = Rectangle;
  MoveData : TYPE = Rectangle;

  EventReason : TYPE = {
    Move,                -- Generated by a window move.
    Raise,               -- Generated by raising a window.
    Lower,               -- Generated by lowering a window.
    Visibility           -- Generated by change of visibility
  };

  -- The reason an event was generated.

  EventType : TYPE = {
    Mouse,              -- The mouse has moved, or the button state.
                        -- has changed.
    KeyPress,           -- A key has been pressed.
    KeyRelease,         -- A key has been released.
    EnterNotify,        -- The mouse pointer has entered a window.
    LeaveNotify,        -- The mouse pointer has left a window.
    Expose,             -- A rectangle of the window has been exposed.
                        -- The owning client should redraw this
                        -- portion of the window.
    Obscure,            -- A rectangle of the window has been obscured.
    Move                -- Window has moved (user dragged it with wm etc.)
  };

  -- The type of the event.

  EventData : TYPE = CHOICE EventType OF {
    Mouse        => MouseData,
    KeyPress    => KeySym,
    KeyRelease  => KeySym,
    EnterNotify => NoData,
    LeaveNotify => NoData,
    Expose       => Rectangle, 
    Obscure      => Rectangle,
    Move         => MoveData
  };

  -- Union of all event data types.

  Event : TYPE = RECORD [ t : Time.ns,       -- Time when event was generated.
                          w : WindowID,      -- Window on which the
                                             -- event was generated.
                          d : EventData,     -- Data for various event types.
                          r : EventReason ]; -- Reason for generating the event.

  -- "Event"s are a discriminated union of all possible event
  -- types. Each event is associated with a particular
  -- window. Generally the owner of the associated window will receive
  -- the event, but depending on the window manager policy, any subset
  -- of the clients may receive any event.

  ClipOp : TYPE = { Set, Add, Subtract };

  -- A "ClipOp" is used to specify what kind of operation should be
  -- performed on a window clip mask when calling "AdjustClip".

  EventStream : PROC [ ] 
               RETURNS [ evoffer : IREF IOOffer ]
               RAISES Failure;

  -- Ask for the WS server to provide an event stream. The supplied
  -- event stream operates in receive master mode.
    
  CreateWindow : PROC    [  x : INTEGER,
                            y : INTEGER,
                        width : CARDINAL,
                       height : CARDINAL ]
                 RETURNS [ w : WindowID ]
                 RAISES Failure;

  -- Create a window with the given position and size.  Returns a
  -- window identifier "w". The window will not initially be mapped on
  -- the display.

  DestroyWindow : PROC    [ w : WindowID ]
                  RETURNS [ ]
                  RAISES BadWindow;
  
  -- Destroys the specified window.
  
  UpdateStream : PROC [ w : WindowID,
                        p : FB.Protocol,
                        q : FB.QoS,
                        clip : BOOLEAN ]
                 RETURNS [ fbid : FB.StreamID, 
                          offer : IREF IOOffer,
                           blit : IREF FBBlit ]
                 RAISES BadWindow, Failure;
  
  -- Returns an IO Offer for an update stream and/or an "FBBlit"
  -- closure for window "w" using the protocol "p".

  MapWindow : PROC [ w : WindowID ] 
              RETURNS [ ]
              RAISES BadWindow, Failure;
  
  -- Causes the window "w" to become mapped on the framestore device.
  -- Updates to the window become possible.
  
  UnMapWindow : PROC [ w : WindowID ] 
                RETURNS [ ]
                RAISES BadWindow;

  -- Causes the window "w" to become unmapped on the framestore device.  
  -- Updates to the window will be ignored.
  
  MoveWindow : PROC [ w : WindowID,
                      x : INTEGER,
                      y : INTEGER ]
               RETURNS [ ]
               RAISES BadWindow;

  -- Asks for the window "w" to be moved to position $("x", "y")$.
  
  ResizeWindow : PROC [      w : WindowID,
                         width : INTEGER,
                        height : INTEGER ]
                 RETURNS [ ]
                 RAISES BadWindow;
  
  -- Asks for the window "w" to be resized to $"width" \times "height"$.

  RaiseWindow : PROC [       w : WindowID ]
                 RETURNS [ ]
                 RAISES BadWindow;

  -- Asks for the window "w" to be moved to the front of the display.

  LowerWindow : PROC [       w : WindowID ]
                 RETURNS [ ]
                 RAISES BadWindow;

  -- Asks for the window "w" to be moved to the back of the display.

  AdjustClip : PROC [      w : WindowID,
                      region : Region.T,
                          clipOp : ClipOp ]
                RETURNS [ ];

  -- Asks for the window "w" to have its clip region adjusted. The
  -- operation depends on the value of "clipOp":

  -- \begin {description}
  -- \item[Set] --- The current clip region is replaced with "region".
  -- \item[Add] --- "region" is merged with the current clip region.
  -- \item[Subtract] --- "region" is subtracted from the current clip
  -- region. 
  -- \end{description}

  SetTitle : PROC [ w : WindowID,
                    title : STRING ] 
              RETURNS [ ];

  -- Asks for the name "title" to be associated with window "w".
  
  Info : PROC [ ]
         RETURNS [ width : CARDINAL,
                  height : CARDINAL,
                   xgrid : CARDINAL,
                   ygrid : CARDINAL,
                   psize : CARDINAL,
		   pbits : CARDINAL,
                  protos : SET OF FB.Protocol ];


  -- "Info" is used to obtain information about:
  -- \begin {itemize}
  -- \item The dimensions of the associated display ("width", "height").
  -- \item The granularity with which windows may be positioned
  -- ("xgrid, "ygrid").
  -- \item The pixel size and the number of useful bits per pixel
  -- ("psize, pbits")
  -- \item The protocols supported by the display ("protos").
  -- \end {itemize}

  Close : PROC [ ] RETURNS [ ] RAISES Failure;

  -- Should be called when finished with the WS server. It causes all
  -- open windows owned by the client to be destroyed.

  WinInfo : PROC [ w : WindowID ]
             RETURNS [ x : INTEGER,
                       y : INTEGER,
                       width : CARDINAL,
                       height : CARDINAL ]
             RAISES BadWindow;

  -- "WinInfo" is used to obtain information about the location and
  -- dimensions of a window.
  
END.




